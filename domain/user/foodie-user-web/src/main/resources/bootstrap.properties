######################################################
#
#   Eureka 注册中心(本地)
#
######################################################
eureka.client.serviceUrl.defaultZone=http://peer1:20011/eureka/,http://peer2:20012/eureka/

####################################################
#
#    Eureka 注册中心（docker）
#
#####################################################
#eureka.client.serviceUrl.defaultZone=http://172.25.131.203:20011/eureka/
#
##将IP(就是下面的ip-address)注册到Eureka Server上，而如果不配置就是机器的hostname
#eureka.instance.prefer-ip-address=true
##容器所在服务器内网IP
#eureka.instance.ip-address=172.25.131.203
#eureka.instance.instance-id=${eureka.instance.ip-address}:${server.port}



########################################
#
#        config配置中心(必须再需要读取的配置项之前)
#        本地为dev，docker为prod
#
########################################
# 开启eureka拉取服务列表
spring.cloud.config.discovery.enabled=true
# 要拉取的配置中心config服务端的appName
spring.cloud.config.discovery.service-id=config-server
# git分支名
spring.cloud.config.label=main
# git里的配置文件的profile
# 配置文件为foodie-user-service-dev.yml和foodie-user-service.yml
spring.cloud.config.profile=dev
#spring.cloud.config.profile=prod
# git里的配置文件的前缀
# 默认会用application的名字作为git上配置文件的名字进行拉取，这里指定了git上实际的文件名字
spring.cloud.config.name=foodie-user-service

#################################
#
#      Hystrix超时、降级、缓存（全局）
#
#################################
# 开启Feign下面的hystrix
feign.hystrix.enabled=true
# 是否开启全局服务降级
hystrix.command.default.fallback.enabled=true
# 是否开启全局超时
hystrix.command.default.execution.timeout.enabled=true
# 全局超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=27000
# 超时以后终止线程
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true
# 取消的时候终止线程
hystrix.command.default.execution.isolation.thread.interruptInFutureCancel=true

# 开启缓存访问
hystrix.command.default.requestCache.enabled=true

########################################3
#
#      Hystrix超时、降级、缓存（指定方法）
#
############################################
# @HystrixCommand指定的方法名字的超时时间
hystrix.command.loginFail.execution.isolation.thread.timeoutInMilliseconds=4000

#################################
#
#      Hystrix熔断器（全局）
#
#################################
# 熔断器是否开启，默认为true，可以不写
hystrix.command.default.circuitBreaker.enabled=true
# 强制开启熔断开关，默认为false，可以不写，开启后所有请求都会熔断
hystrix.command.default.circuitBreaker.forceOpen=false
# 强制关闭熔断开关，默认为false，可以不写开启后所有请求都不会熔断
hystrix.command.default.circuitBreaker.forceClosed=false

# 熔断的前提条件（请求的数量），在一定的时间窗口内，请求达到5个以后，才开始进行熔断判断
hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
# 配置时间窗口，与上一个参数一起使用，当20秒内有5个请求，才开始进行熔断判断
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=20000
# 超过50%的失败请求，则熔断开关开启
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
# 当熔断开启以后，经过多少秒再进入半开状态
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=15000

########################################
#
#      Hystrix熔断器（指定方法）todo
#
########################################



#######################################
#      由于本模块不作为调用者，所有不需要配置ribbon的超时时间
#      Ribbon超时重试（与Hystrix配合）
#
########################################

# ribbon的超时重试，最大超时时间为27000，Hystrix应大于27000
# 所有的HTTP的method都进行重试
#feign-client.ribbon.OkToRetryOnAllOperations=true
# 建立连接超时时间
#feign-client.ribbon.ConnectTimeout=1000
# 响应超时时间
#feign-client.ribbon.ReadTimeout=2000
# 每台机器最大重试次数
#feign-client.ribbon.MaxAutoRetries=2
# 可以重试几台机器
#feign-client.ribbon.MaxAutoRetriesNextServer=2

#######################################
#
#        actuator暴露接口
#        查看hystrix监控信息http://localhost:port/actuator
#        从配置中心读取
#
########################################
# 安全检查，待研究，先关闭
#management.security.enabled=false
## 暴露全部
#management.endpoints.web.exposure.include=*
#  # 顾名思义
#management.endpoint.health.show-details=always





