server.port=10003

# docker 内网IP
spring.datasource.url=jdbc:mysql://172.25.131.203:3306/foodie_shop?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
spring.datasource.password=1990425lc

####################################################
#
#    Eureka 注册中心（docker）
#
#####################################################
eureka.client.serviceUrl.defaultZone=http://172.25.131.203:20011/eureka/

#将IP(就是下面的ip-address)注册到Eureka Server上，而如果不配置就是机器的hostname
eureka.instance.prefer-ip-address=true
#容器所在服务器内网IP
eureka.instance.ip-address=172.25.131.203
eureka.instance.instance-id=${eureka.instance.ip-address}:${server.port}

# feign、ribbon、hystrix超时时间配置配置：
# 1、服务提供者不需要配置feign、ribbon的超时时间等参数；
# 2、服务调用者需要配置feign、ribbon负载均衡的超时时间等参数，指明调用超时时间、重试次数和重试服务器；
# 3、feign优先级大于ribbon，会覆盖；
# 4、服务提供者必须配置hystrix参数，因为服务提供者可以确保自己的服务可以降级熔断；
# 5、服务调用者也需要配置hystrix参数，因为调用其他模块的服务也需要降级熔断，并且调用者逻辑内部也可能因为庞大的计算消耗内存或者fullcg，导致需要降级和熔断；
# 6、hystrix的超时时间（本模块内部）要大于ribbon重试超时时间（重试调用其他模块），给本模块充分的时间重试；
#
# 综上：
# feign的响应时间5000覆盖掉ribbon的2000，建立连接时间2000覆盖ribbon的1000，ribbon重试的总时间
# = （5000+2000）* （2+1） * （2+1）=63000
#
# 所以hystrix的超时时间应该大于63000

##########################################
#
#      feign的超时重试配置
#
###########################################
#优先级高于ribbon,优先级高的覆盖优先级低的，而不是取交集


# feign全局配置
feign.client.config.default.connect-timeout=2000
feign.client.config.default.read-timeout=5000

# feign指定服务名foodie-item-service配置
feign.client.config.foodie-item-service.connect-timeout=2000
feign.client.config.foodie-item-service.read-timeout=5000


#######################################
#
#      Ribbon超时重试（与Hystrix配合）
#
########################################

# ribbon全局配置
ribbon.ConnectTimeOut=100
ribbon.ReadTimeOut=3000

# ribbon指定了服务名foodie-item-service的配置
# 所有的HTTP的method都进行重试
foodie-item-service.ribbon.OkToRetryOnAllOperations=true
# 建立连接超时时间
foodie-item-service.ribbon.ConnectTimeout=1000
# 响应超时时间
foodie-item-service.ribbon.ReadTimeout=2000
# 每台机器最大重试次数
foodie-item-service.ribbon.MaxAutoRetries=2
# 可以重试几台机器
foodie-item-service.ribbon.MaxAutoRetriesNextServer=2

#################################
#
#      Hystrix超时、缓存
#
#################################
# 开启Feign下面的hystrix
feign.hystrix.enabled=true
# 是否开启全局服务降级
hystrix.command.default.fallback.enabled=true
# 是否开启全局超时
hystrix.command.default.execution.timeout.enabled=true
# 全局超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=27000
# 超时以后终止线程
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true
# 取消的时候终止线程
hystrix.command.default.execution.isolation.thread.interruptInFutureCancel=true
# 开启缓存访问
hystrix.command.default.requestCache.enabled=true
# @HystrixCommand指定的方法名字的超时时间
hystrix.command.queryCommandKey.execution.isolation.thread.timeoutInMilliseconds=4000

#################################
#
#      Hystrix熔断器（全局）
#
#################################
# 熔断器是否开启，默认为true
hystrix.command.default.circuitBreaker.enabled=true
# 强制开启熔断开关，默认为false，开启后所有请求都会熔断
hystrix.command.default.circuitBreaker.forceOpen=false
# 强制关闭熔断开关，默认为false，开启后所有请求都不会熔断
hystrix.command.default.circuitBreaker.forceClosed=false

# 熔断的前提条件（请求的数量），在一定的时间窗口内，请求达到5个以后，才开始进行熔断判断
hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
# 配置时间窗口，与上一个参数一起使用，当20秒内有5个请求，才开始进行熔断判断
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=20000
# 超过50%的失败请求，则熔断开关开启
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
# 当熔断开启以后，经过多少秒再进入半开状态
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=15000

########################################
#
#      Hystrix熔断器（指定方法）todo
#
########################################

#######################################
#
#        actuator暴露接口
#        查看hystrix监控信息http://localhost:port/actuator
#
########################################
# 安全检查，待研究，先关闭
management.security.enabled=false
# 暴露全部
management.endpoints.web.exposure.include=*
# 顾名思义
management.endpoint.health.show-details=always
